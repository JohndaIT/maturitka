package com.example.casovac_kolar;

import javafx.animation.TranslateTransition;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.util.Duration;

import java.net.URL;
import java.util.Objects;
import java.util.ResourceBundle;

public class HelloController implements Initializable, Runnable {

    @FXML
    private Label popisekHod;

    @FXML
    private Label popisekMin;

    @FXML
    private Label popisekSek;

    @FXML
    private ComboBox<Integer> comboHod;

    @FXML
    private ComboBox<Integer> comboMin;

    @FXML
    private ComboBox<Integer> comboSek;

    @FXML
    private AnchorPane panelNastaveni;

    @FXML
    private AnchorPane panelOdpoctu;

    private Thread t;
    private boolean bezi = false;
    private int sekundy;
    private boolean pauza = false;
    Object monitor = new Object();
    MediaPlayer mp;

    private ImageView obrazek;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        ObservableList<Integer> hodinyList = FXCollections.observableArrayList();
        ObservableList<Integer> minutyASekundyList = FXCollections.observableArrayList();
        for(int i=0;i<60;i++) {
            if(i>=0 && i<24) hodinyList.add(i);
            minutyASekundyList.add(i);
        }
        comboHod.setItems(hodinyList);
        comboHod.setValue(0);
        comboMin.setItems(minutyASekundyList);
        comboMin.setValue(0);
        comboSek.setItems(minutyASekundyList);
        comboSek.setValue(0);
    }
    @FXML
    public void zapnutiCasovace(ActionEvent actionEvent) {
        animaceNahoru();
        t = new Thread(this);
        t.setDaemon(true);
        bezi = true;
        nacteniCasu();
        t.start();
    }

    private void nacteniCasu() {
        sekundy = comboHod.getValue()*3600+comboMin.getValue()*60+comboSek.getValue();
    }

    public void animaceNahoru(){
        TranslateTransition tt1 = new TranslateTransition();
        tt1.setDuration(Duration.millis(800));
        tt1.setToX(0);
        tt1.setToY(-233);
        tt1.setNode(panelNastaveni);
        tt1.play();
    }

    public void animaceDolu(){
        TranslateTransition tt1 = new TranslateTransition();
        tt1.setDuration(Duration.millis(800));
        tt1.setToX(0);
        tt1.setToY(0);
        tt1.setNode(panelNastaveni);
        tt1.play();
    }

    public void zastaveniCasovace(ActionEvent actionEvent) {
        animaceDolu();
        bezi = false;
        pauza = false;
        /*synchronized (monitor){
            monitor.notify();
            pauza=false;
        }*/
    }

    @Override
    public void run() {
        //pocitat cas ve vlakne
        long cas = System.currentTimeMillis()+1000; //aktualni cas + 1s
        while(bezi){
            //synchronized (monitor){
            /*if(pauza) {
                try {
                    monitor.wait();
                } catch (InterruptedException e) {
                    System.err.println(e.getMessage());
                }
            }*/
            if (System.currentTimeMillis() > cas && !pauza){ //ubehla 1s
                Platform.runLater(new Runnable() {
                    @Override
                    public void run() {
                        aktualizujCas();
                    }
                });
                if(sekundy == 0) {
                    Media bell = null;
                    bell = new Media(getClass().getClassLoader().getResource("bell.mp3").toString());
                    mp = new MediaPlayer(bell);
                    mp.play();
                    bezi = false;
                }
                else sekundy--;
                cas = System.currentTimeMillis()+1000;
            }
       // }
    }}

    private void aktualizujCas() {
        short hod = (short)(sekundy/3600);
        popisekHod.setText((hod<10)?"0"+hod:""+hod);
        short min = (short)((sekundy%3600)/60);
        popisekMin.setText((min<10)?"0"+min:""+min);
        short sek = (short)(sekundy%60);
        popisekSek.setText((sek<10)?"0"+sek:""+sek);
    }

    public void pauzaCasovace(ActionEvent actionEvent) {
        pauza=!pauza;
        /*if(!pauza) pauza=true;
        else {
            synchronized (monitor){
                monitor.notify();
                pauza=false;
            }
        }*/
    }

    public void resetCasovace(ActionEvent actionEvent) {
        nacteniCasu();
    }
}
